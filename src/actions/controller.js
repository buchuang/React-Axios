//This file is automatically generated

 //api-credential-controller
let ApiCredentialController = {
    __name: 'ApiCredentialController',
    create: {controller: 'ApiCredentialController' , method: 'create'}, // 新增
    deleteById: {controller: 'ApiCredentialController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'ApiCredentialController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'ApiCredentialController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'ApiCredentialController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'ApiCredentialController' , method: 'pageByCriteria'}, // 按条件分页查询
    refreshApiKey: {controller: 'ApiCredentialController' , method: 'refreshApiKey'}, // 刷新apiKey
    update: {controller: 'ApiCredentialController' , method: 'update'}, // 更新
};
 //app-archive-controller
let AppArchiveController = {
    __name: 'AppArchiveController',
    create: {controller: 'AppArchiveController' , method: 'create'}, // 新增
    deleteById: {controller: 'AppArchiveController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'AppArchiveController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'AppArchiveController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'AppArchiveController' , method: 'findById'}, // 按主键查询
    handleWhitelist: {controller: 'AppArchiveController' , method: 'handleWhitelist'}, // 授权
    loadWhitelist: {controller: 'AppArchiveController' , method: 'loadWhitelist'}, // 获取授权
    pageByCriteria: {controller: 'AppArchiveController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'AppArchiveController' , method: 'update'}, // 更新
    uploadArchive: {controller: 'AppArchiveController' , method: 'uploadArchive'}, // app介质上传
    uploadPreviews: {controller: 'AppArchiveController' , method: 'uploadPreviews'}, // 上传预览图
};
 //app-controller
let AppController = {
    __name: 'AppController',
    create: {controller: 'AppController' , method: 'create'}, // 新增
    deleteById: {controller: 'AppController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'AppController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'AppController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'AppController' , method: 'findById'}, // 按主键查询
    findGropApps: {controller: 'AppController' , method: 'findGropApps'}, // 根据当前用户角色查询app列表
    pageByCriteria: {controller: 'AppController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'AppController' , method: 'update'}, // 更新
    uploadIcon: {controller: 'AppController' , method: 'uploadIcon'}, // 上传图���
};
 //appstore-api-controller
let AppstoreApiController = {
    __name: 'AppstoreApiController',
    uploadAppArchive: {controller: 'AppstoreApiController' , method: 'uploadAppArchive'}, // 应用上传
    uploadMicroappArchive: {controller: 'AppstoreApiController' , method: 'uploadMicroappArchive'}, // 微应用上传
};
 //archive-download-stat-controller
let ArchiveDownloadStatController = {
    __name: 'ArchiveDownloadStatController',
    getAppTodyDownloadCount: {controller: 'ArchiveDownloadStatController' , method: 'getAppTodyDownloadCount'}, // 查询应用当天下载次数
    getAppTotalDownloadCount: {controller: 'ArchiveDownloadStatController' , method: 'getAppTotalDownloadCount'}, // 查询应用总下载次数
};
 //auth-tpl-controller
let AuthTplController = {
    __name: 'AuthTplController',
    addRootResourceGroups: {controller: 'AuthTplController' , method: 'addRootResourceGroups'}, // 为权限模板添加根资源组
    create: {controller: 'AuthTplController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'AuthTplController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'AuthTplController' , method: 'findById'}, // 按主键查询
    queryALLAuthTpls: {controller: 'AuthTplController' , method: 'queryALLAuthTpls'}, // 列出所有的权限模板
    queryResGroups: {controller: 'AuthTplController' , method: 'queryResGroups'}, // 查询某个权限模板下的根资源组
    querySubRoleTemplates: {controller: 'AuthTplController' , method: 'querySubRoleTemplates'}, // 查询权限模板下的角色模板
    removeRootResourceGroups: {controller: 'AuthTplController' , method: 'removeRootResourceGroups'}, // 从权限模板中移除根资源组
    update: {controller: 'AuthTplController' , method: 'update'}, // 更新
};
 //business-address-controller
let BusinessAddressController = {
    __name: 'BusinessAddressController',
    create: {controller: 'BusinessAddressController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessAddressController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessAddressController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'BusinessAddressController' , method: 'findById'}, // 按主键查询
    findByPageId: {controller: 'BusinessAddressController' , method: 'findByPageId'}, // 根据页面id查询通讯录配置
    update: {controller: 'BusinessAddressController' , method: 'update'}, // 更新
};
 //business-address-rule-controller
let BusinessAddressRuleController = {
    __name: 'BusinessAddressRuleController',
    batchCreate: {controller: 'BusinessAddressRuleController' , method: 'batchCreate'}, // 批量增加
    create: {controller: 'BusinessAddressRuleController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessAddressRuleController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessAddressRuleController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'BusinessAddressRuleController' , method: 'findById'}, // 按主键查询
    findRulesByAddressId: {controller: 'BusinessAddressRuleController' , method: 'findRulesByAddressId'}, // 根据通讯录id查询通讯录规则
    update: {controller: 'BusinessAddressRuleController' , method: 'update'}, // 更新
};
 //business-announce-resource-controller
let BusinessAnnounceResourceController = {
    __name: 'BusinessAnnounceResourceController',
    batchCreate: {controller: 'BusinessAnnounceResourceController' , method: 'batchCreate'}, // 批量增加
    batchUpdate: {controller: 'BusinessAnnounceResourceController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessAnnounceResourceController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessAnnounceResourceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessAnnounceResourceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessAnnounceResourceController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessAnnounceResourceController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessAnnounceResourceController' , method: 'update'}, // 更新
};
 //business-app-page-controller
let BusinessAppPageController = {
    __name: 'BusinessAppPageController',
    create: {controller: 'BusinessAppPageController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessAppPageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessAppPageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessAppPageController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessAppPageController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessAppPageController' , method: 'update'}, // 更新
};
 //business-auth-res-controller
let BusinessAuthResController = {
    __name: 'BusinessAuthResController',
    create: {controller: 'BusinessAuthResController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessAuthResController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessAuthResController' , method: 'deleteByIds'}, // 按主键集合删除
    findAuthBySchemeId: {controller: 'BusinessAuthResController' , method: 'findAuthBySchemeId'}, // 方案授权查询
    findById: {controller: 'BusinessAuthResController' , method: 'findById'}, // 按主键查询
    setAuthScheme: {controller: 'BusinessAuthResController' , method: 'setAuthScheme'}, // 方案授权
    update: {controller: 'BusinessAuthResController' , method: 'update'}, // 更新
};
 //business-banner-resource-controller
let BusinessBannerResourceController = {
    __name: 'BusinessBannerResourceController',
    batchCreate: {controller: 'BusinessBannerResourceController' , method: 'batchCreate'}, // 批量增加
    batchUpdate: {controller: 'BusinessBannerResourceController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessBannerResourceController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessBannerResourceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessBannerResourceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessBannerResourceController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessBannerResourceController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessBannerResourceController' , method: 'update'}, // 更新
};
 //business-common-controller
let BusinessCommonController = {
    __name: 'BusinessCommonController',
    uploadImg: {controller: 'BusinessCommonController' , method: 'uploadImg'}, // 图片上传
};
 //business-custom-floor-conf-controller
let BusinessCustomFloorConfController = {
    __name: 'BusinessCustomFloorConfController',
    create: {controller: 'BusinessCustomFloorConfController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessCustomFloorConfController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessCustomFloorConfController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessCustomFloorConfController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessCustomFloorConfController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessCustomFloorConfController' , method: 'update'}, // 更新
};
 //business-dict-controller
let BusinessDictController = {
    __name: 'BusinessDictController',
    create: {controller: 'BusinessDictController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessDictController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessDictController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'BusinessDictController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessDictController' , method: 'update'}, // 更新
};
 //business-dict-item-controller
let BusinessDictItemController = {
    __name: 'BusinessDictItemController',
    create: {controller: 'BusinessDictItemController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessDictItemController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessDictItemController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessDictItemController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessDictItemController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessDictItemController' , method: 'update'}, // 更新
};
 //business-excel-controller
let BusinessExcelController = {
    __name: 'BusinessExcelController',
    exportExcel: {controller: 'BusinessExcelController' , method: 'exportExcel'}, // 导出通讯录
};
 //business-festival-lattice-resource-controller
let BusinessFestivalLatticeResourceController = {
    __name: 'BusinessFestivalLatticeResourceController',
    batchCreate: {controller: 'BusinessFestivalLatticeResourceController' , method: 'batchCreate'}, // 批量增加
    batchUpdate: {controller: 'BusinessFestivalLatticeResourceController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessFestivalLatticeResourceController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessFestivalLatticeResourceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessFestivalLatticeResourceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessFestivalLatticeResourceController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessFestivalLatticeResourceController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessFestivalLatticeResourceController' , method: 'update'}, // 更新
};
 //business-floor-controller
let BusinessFloorController = {
    __name: 'BusinessFloorController',
    batchUpdate: {controller: 'BusinessFloorController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessFloorController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessFloorController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessFloorController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessFloorController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessFloorController' , method: 'findById'}, // 按主键查询
    findByPageTabId: {controller: 'BusinessFloorController' , method: 'findByPageTabId'}, // 根据页面Id获取楼层列表
    update: {controller: 'BusinessFloorController' , method: 'update'}, // 更新
};
 //business-inform-resource-controller
let BusinessInformResourceController = {
    __name: 'BusinessInformResourceController',
    batchCreate: {controller: 'BusinessInformResourceController' , method: 'batchCreate'}, // 批量增加
    batchUpdate: {controller: 'BusinessInformResourceController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessInformResourceController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessInformResourceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessInformResourceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessInformResourceController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessInformResourceController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessInformResourceController' , method: 'update'}, // 更新
};
 //business-lattice-resource-controller
let BusinessLatticeResourceController = {
    __name: 'BusinessLatticeResourceController',
    batchCreate: {controller: 'BusinessLatticeResourceController' , method: 'batchCreate'}, // 批量增加
    batchUpdate: {controller: 'BusinessLatticeResourceController' , method: 'batchUpdate'}, // 批量更新
    create: {controller: 'BusinessLatticeResourceController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessLatticeResourceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessLatticeResourceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessLatticeResourceController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessLatticeResourceController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessLatticeResourceController' , method: 'update'}, // 更新
};
 //business-popup-page-controller
let BusinessPopupPageController = {
    __name: 'BusinessPopupPageController',
    create: {controller: 'BusinessPopupPageController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessPopupPageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessPopupPageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByAppPageId: {controller: 'BusinessPopupPageController' , method: 'findByAppPageId'}, // 根据页面id获取弹出框页面配置
    findById: {controller: 'BusinessPopupPageController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessPopupPageController' , method: 'update'}, // 更新
};
 //business-scheme-conf-controller
let BusinessSchemeConfController = {
    __name: 'BusinessSchemeConfController',
    create: {controller: 'BusinessSchemeConfController' , method: 'create'}, // 新增
    createWithWhiteList: {controller: 'BusinessSchemeConfController' , method: 'createWithWhiteList'}, // 新增(携带分享和截屏白名单)
    deleteById: {controller: 'BusinessSchemeConfController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessSchemeConfController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'BusinessSchemeConfController' , method: 'findById'}, // 按主键查询
    findByIdWithWhiteList: {controller: 'BusinessSchemeConfController' , method: 'findByIdWithWhiteList'}, // 根据id查询(携带分享和截屏白名单)
    update: {controller: 'BusinessSchemeConfController' , method: 'update'}, // 更新
    updateWithWhiteList: {controller: 'BusinessSchemeConfController' , method: 'updateWithWhiteList'}, // 更新(携带分享和截屏白名单)
};
 //business-scheme-controller
let BusinessSchemeController = {
    __name: 'BusinessSchemeController',
    create: {controller: 'BusinessSchemeController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessSchemeController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessSchemeController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'BusinessSchemeController' , method: 'findByCriteria'}, // 按条件分页查询
    findById: {controller: 'BusinessSchemeController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessSchemeController' , method: 'update'}, // 更新
};
 //business-spread-page-controller
let BusinessSpreadPageController = {
    __name: 'BusinessSpreadPageController',
    create: {controller: 'BusinessSpreadPageController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessSpreadPageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessSpreadPageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByAppPageId: {controller: 'BusinessSpreadPageController' , method: 'findByAppPageId'}, // 根据页面id获取开屏页配置
    findById: {controller: 'BusinessSpreadPageController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessSpreadPageController' , method: 'update'}, // 更新
};
 //business-tab-page-controller
let BusinessTabPageController = {
    __name: 'BusinessTabPageController',
    create: {controller: 'BusinessTabPageController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessTabPageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessTabPageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByAppPageId: {controller: 'BusinessTabPageController' , method: 'findByAppPageId'}, // 根据页面id获取tab页配置
    findById: {controller: 'BusinessTabPageController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessTabPageController' , method: 'update'}, // 更新
};
 //business-welcome-page-controller
let BusinessWelcomePageController = {
    __name: 'BusinessWelcomePageController',
    create: {controller: 'BusinessWelcomePageController' , method: 'create'}, // 新增
    deleteById: {controller: 'BusinessWelcomePageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'BusinessWelcomePageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByAppPageId: {controller: 'BusinessWelcomePageController' , method: 'findByAppPageId'}, // 根据页面id获取欢迎页配置
    findById: {controller: 'BusinessWelcomePageController' , method: 'findById'}, // 按主键查询
    update: {controller: 'BusinessWelcomePageController' , method: 'update'}, // 更新
};
 //cof-tools-controller
let CofToolsController = {
    __name: 'CofToolsController',
    scanFunctions: {controller: 'CofToolsController' , method: 'scanFunctions'}, // scanFunctions
};
 //comment-controller
let CommentController = {
    __name: 'CommentController',
    create: {controller: 'CommentController' , method: 'create'}, // 新增
    deleteById: {controller: 'CommentController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'CommentController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'CommentController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'CommentController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'CommentController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'CommentController' , method: 'update'}, // 更新
};
 //dict-entry-controller
let DictEntryController = {
    __name: 'DictEntryController',
    create: {controller: 'DictEntryController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'DictEntryController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findByCriteria: {controller: 'DictEntryController' , method: 'findByCriteria'}, // 分页查询字典项
    findById: {controller: 'DictEntryController' , method: 'findById'}, // 按主键查询
    update: {controller: 'DictEntryController' , method: 'update'}, // 更新
};
 //dict-type-controller
let DictTypeController = {
    __name: 'DictTypeController',
    create: {controller: 'DictTypeController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'DictTypeController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    downloadDictTemplate: {controller: 'DictTypeController' , method: 'downloadDictTemplate'}, // 下载导入模板
    exportExcelAll: {controller: 'DictTypeController' , method: 'exportExcelAll'}, // 导出所有数据字典
    exportExcelByCodes: {controller: 'DictTypeController' , method: 'exportExcelByCodes'}, // 按给定的 code 批量导出数据字典
    exportExcelById: {controller: 'DictTypeController' , method: 'exportExcelById'}, // 导出父类以及子类的数据字典
    exportExcelByIds: {controller: 'DictTypeController' , method: 'exportExcelByIds'}, // 按给定的 id 批量导出数据字典
    findByCriteria: {controller: 'DictTypeController' , method: 'findByCriteria'}, // 分页查询字典类型
    findById: {controller: 'DictTypeController' , method: 'findById'}, // 按主键查询
    importExcel: {controller: 'DictTypeController' , method: 'importExcel'}, // 导入字典
    querySubDictEntries: {controller: 'DictTypeController' , method: 'querySubDictEntries'}, // 查询类型下的字典项
    update: {controller: 'DictTypeController' , method: 'update'}, // 更新
};
 //dimension-controller
let DimensionController = {
    __name: 'DimensionController',
    create: {controller: 'DimensionController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'DimensionController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'DimensionController' , method: 'findById'}, // 按主键查询
    queryByCriteria: {controller: 'DimensionController' , method: 'queryByCriteria'}, // 按条件查询维度
    update: {controller: 'DimensionController' , method: 'update'}, // 更新
};
 //employee-controller
let EmployeeController = {
    __name: 'EmployeeController',
    create: {controller: 'EmployeeController' , method: 'create'}, // 新增员工，如提供用户信息，可选同步创建用户, 或与已有用户进行绑定
    deleteByIds: {controller: 'EmployeeController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findById: {controller: 'EmployeeController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'EmployeeController' , method: 'pagingByCriteria'}, // 分页查询所有员工
    update: {controller: 'EmployeeController' , method: 'update'}, // 更新
};
 //function-controller
let FunctionController = {
    __name: 'FunctionController',
    create: {controller: 'FunctionController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'FunctionController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'FunctionController' , method: 'findById'}, // 按主键查询
    importFunctions: {controller: 'FunctionController' , method: 'importFunctions'}, // 批量导入
    update: {controller: 'FunctionController' , method: 'update'}, // 更新
};
 //gateway-api-access-controller
let GatewayApiAccessController = {
    __name: 'GatewayApiAccessController',
    findApiPaths: {controller: 'GatewayApiAccessController' , method: 'findApiPaths'}, // 查询apiPath
    findTopN: {controller: 'GatewayApiAccessController' , method: 'findTopN'}, // 获取topN
    pagingByCriteria: {controller: 'GatewayApiAccessController' , method: 'pagingByCriteria'}, // 分页查询统计信息
};
 //gateway-configuration-controller
let GatewayConfigurationController = {
    __name: 'GatewayConfigurationController',
    createApiWhites: {controller: 'GatewayConfigurationController' , method: 'createApiWhites'}, // 创建api白名单：每次传全量的id
    createDeviceBlacklists: {controller: 'GatewayConfigurationController' , method: 'createDeviceBlacklists'}, // 创建设备号黑名单
    createDeviceWhitelists: {controller: 'GatewayConfigurationController' , method: 'createDeviceWhitelists'}, // 创建设备号白名单
    queryApiWhitelists: {controller: 'GatewayConfigurationController' , method: 'queryApiWhitelists'}, // 查询api白名单
    queryDeviceBlacklists: {controller: 'GatewayConfigurationController' , method: 'queryDeviceBlacklists'}, // 查询设备号黑名单列表
    queryDeviceWhitelists: {controller: 'GatewayConfigurationController' , method: 'queryDeviceWhitelists'}, // 查询设备号白名单列表
};
 //gateway-open-api-controller
let GatewayOpenApiController = {
    __name: 'GatewayOpenApiController',
    deleteByIds: {controller: 'GatewayOpenApiController' , method: 'deleteByIds'}, // 批量删除：支持单个和批量
    findDetailById: {controller: 'GatewayOpenApiController' , method: 'findDetailById'}, // 按主键查询openApi详情
    importFromFile: {controller: 'GatewayOpenApiController' , method: 'importFromFile'}, // 导入api：从.json文件导入
    pagingAuthorizationsByCriteria: {controller: 'GatewayOpenApiController' , method: 'pagingAuthorizationsByCriteria'}, // 按条件分页查询订阅api列表
    pagingByCriteria: {controller: 'GatewayOpenApiController' , method: 'pagingByCriteria'}, // 按条件分页查询open-api列表
    publish: {controller: 'GatewayOpenApiController' , method: 'publish'}, // api发布：单个和批量
    queryTags: {controller: 'GatewayOpenApiController' , method: 'queryTags'}, // 查询标签列表
    recreateSubscriptionKey: {controller: 'GatewayOpenApiController' , method: 'recreateSubscriptionKey'}, // 刷新订阅凭证
    subscribe: {controller: 'GatewayOpenApiController' , method: 'subscribe'}, // 订阅api
    unpublish: {controller: 'GatewayOpenApiController' , method: 'unpublish'}, // api取消发布：单个和批量
    unsubscribe: {controller: 'GatewayOpenApiController' , method: 'unsubscribe'}, // 取消订阅
};
 //gateway-route-controller
let GatewayRouteController = {
    __name: 'GatewayRouteController',
    create: {controller: 'GatewayRouteController' , method: 'create'}, // 创建路由
    deleteById: {controller: 'GatewayRouteController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'GatewayRouteController' , method: 'deleteByIds'}, // 按主键批量删除
    findByCriteria: {controller: 'GatewayRouteController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'GatewayRouteController' , method: 'findById'}, // 按主键查询
    findRouteTemplates: {controller: 'GatewayRouteController' , method: 'findRouteTemplates'}, // 获取路由模板
    pagingByCriteria: {controller: 'GatewayRouteController' , method: 'pagingByCriteria'}, // 按条件分页查询
    update: {controller: 'GatewayRouteController' , method: 'update'}, // 修改路由
};
 //gateway-route-valve-rate-controller
let GatewayRouteValveRateController = {
    __name: 'GatewayRouteValveRateController',
    create: {controller: 'GatewayRouteValveRateController' , method: 'create'}, // 新增路由限流策略
    deleteById: {controller: 'GatewayRouteValveRateController' , method: 'deleteById'}, // 根据主键删除
    findByRouteId: {controller: 'GatewayRouteValveRateController' , method: 'findByRouteId'}, // 根据路由id查询
    update: {controller: 'GatewayRouteValveRateController' , method: 'update'}, // 修改路由限流策略
};
 //iam-auth-res-controller
let IamAuthResController = {
    __name: 'IamAuthResController',
    findByCriteria: {controller: 'IamAuthResController' , method: 'findByCriteria'}, // 查找授权
    handleAuthReses: {controller: 'IamAuthResController' , method: 'handleAuthReses'}, // 新增或者删除授权
};
 //iam-device-controller
let IamDeviceController = {
    __name: 'IamDeviceController',
    create: {controller: 'IamDeviceController' , method: 'create'}, // 新增
    deleteById: {controller: 'IamDeviceController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'IamDeviceController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'IamDeviceController' , method: 'findByCriteria'}, // 按条件查询
    findByDeviceIds: {controller: 'IamDeviceController' , method: 'findByDeviceIds'}, // 按deviceId集合查询设备信息
    findById: {controller: 'IamDeviceController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'IamDeviceController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'IamDeviceController' , method: 'update'}, // 更新
};
 //iam-dimension-controller
let IamDimensionController = {
    __name: 'IamDimensionController',
    create: {controller: 'IamDimensionController' , method: 'create'}, // 新增
    deleteById: {controller: 'IamDimensionController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'IamDimensionController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'IamDimensionController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'IamDimensionController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'IamDimensionController' , method: 'pageByCriteria'}, // 按条件分页查询
    queryByDimensionId: {controller: 'IamDimensionController' , method: 'queryByDimensionId'}, // 按维度id查询维度下所有员工信息
    update: {controller: 'IamDimensionController' , method: 'update'}, // 更新
};
 //iam-emp-controller
let IamEmpController = {
    __name: 'IamEmpController',
    create: {controller: 'IamEmpController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'IamEmpController' , method: 'deleteByIds'}, // 按主键集合删除
    downloadExcelFormwork: {controller: 'IamEmpController' , method: 'downloadExcelFormwork'}, // 下载人员导入模板
    findById: {controller: 'IamEmpController' , method: 'findById'}, // 按主键查询
    findByIds: {controller: 'IamEmpController' , method: 'findByIds'}, // 根据Id批量查询员工
    findMax: {controller: 'IamEmpController' , method: 'findMax'}, // 查询人员代码最大值
    importExcelFormwork: {controller: 'IamEmpController' , method: 'importExcelFormwork'}, // 人员导入
    pagingByCriteria: {controller: 'IamEmpController' , method: 'pagingByCriteria'}, // 按条件分页查询
    update: {controller: 'IamEmpController' , method: 'update'}, // 更新
};
 //iam-login-config-controller
let IamLoginConfigController = {
    __name: 'IamLoginConfigController',
    create: {controller: 'IamLoginConfigController' , method: 'create'}, // 新增
    deleteById: {controller: 'IamLoginConfigController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'IamLoginConfigController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'IamLoginConfigController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'IamLoginConfigController' , method: 'findById'}, // 按主键查询
    findLoginConfigByAppId: {controller: 'IamLoginConfigController' , method: 'findLoginConfigByAppId'}, // 根据appId查找登录配置
    pageByCriteria: {controller: 'IamLoginConfigController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'IamLoginConfigController' , method: 'update'}, // 更新
};
 //iam-org-controller
let IamOrgController = {
    __name: 'IamOrgController',
    addOrgEmployees: {controller: 'IamOrgController' , method: 'addOrgEmployees'}, // 往机构下批量添加员工
    create: {controller: 'IamOrgController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'IamOrgController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'IamOrgController' , method: 'findById'}, // 按主键查询
    findByIds: {controller: 'IamOrgController' , method: 'findByIds'}, // 根据Id批量查询机构
    pagingByCriteria: {controller: 'IamOrgController' , method: 'pagingByCriteria'}, // 按条件分页查询
    queryEmpOrg: {controller: 'IamOrgController' , method: 'queryEmpOrg'}, // 查询员工���在当前机构
    queryOrgTree: {controller: 'IamOrgController' , method: 'queryOrgTree'}, // 查询当前机构的所有父机构
    querySubEmployees: {controller: 'IamOrgController' , method: 'querySubEmployees'}, // 查询机构下的员工
    querySubOrganizations: {controller: 'IamOrgController' , method: 'querySubOrganizations'}, // 查询当前机构的所有子机构
    querySubPositions: {controller: 'IamOrgController' , method: 'querySubPositions'}, // 查询机构下的岗位
    removeOrgEmployees: {controller: 'IamOrgController' , method: 'removeOrgEmployees'}, // 从机构下批量移除员工
    update: {controller: 'IamOrgController' , method: 'update'}, // 更新
};
 //iam-position-controller
let IamPositionController = {
    __name: 'IamPositionController',
    addPositionEmployees: {controller: 'IamPositionController' , method: 'addPositionEmployees'}, // 往岗位下批量添加员工
    create: {controller: 'IamPositionController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'IamPositionController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'IamPositionController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'IamPositionController' , method: 'pagingByCriteria'}, // 按条件分页查询
    querySubEmployees: {controller: 'IamPositionController' , method: 'querySubEmployees'}, // 查询岗位下的员工
    removePositionEmployees: {controller: 'IamPositionController' , method: 'removePositionEmployees'}, // 从岗位下批量移除员工
    update: {controller: 'IamPositionController' , method: 'update'}, // 更新
};
 //iam-user-controller
let IamUserController = {
    __name: 'IamUserController',
    appLoginNumber: {controller: 'IamUserController' , method: 'appLoginNumber'}, // app可登录人数
    create: {controller: 'IamUserController' , method: 'create'}, // 创建用户
    deleteByIds: {controller: 'IamUserController' , method: 'deleteByIds'}, // 删除用户
    downloadExcelFormwork: {controller: 'IamUserController' , method: 'downloadExcelFormwork'}, // 下载用户导入模板
    findById: {controller: 'IamUserController' , method: 'findById'}, // 按主键查询
    importExcelFormwork: {controller: 'IamUserController' , method: 'importExcelFormwork'}, // 用户导入
    loginTimes: {controller: 'IamUserController' , method: 'loginTimes'}, // 查询当前登录用户数
    pagingByCriteria: {controller: 'IamUserController' , method: 'pagingByCriteria'}, // 按条件分页查询
    pagingUserDtoByCriteria: {controller: 'IamUserController' , method: 'pagingUserDtoByCriteria'}, // 分页查询所有用户
    queryUserDevices: {controller: 'IamUserController' , method: 'queryUserDevices'}, // 查看用户设备
    resetPassword: {controller: 'IamUserController' , method: 'resetPassword'}, // 重置用户密码
    update: {controller: 'IamUserController' , method: 'update'}, // 更新用户
};
 //license-controller
let LicenseController = {
    __name: 'LicenseController',
    getLicense: {controller: 'LicenseController' , method: 'getLicense'}, // 移动License-获取License信息
    uploadLicense: {controller: 'LicenseController' , method: 'uploadLicense'}, // 移动License-上传License文件
};
 //member-controller
let MemberController = {
    __name: 'MemberController',
    addMembers: {controller: 'MemberController' , method: 'addMembers'}, // 添加成员
    deleteMembers: {controller: 'MemberController' , method: 'deleteMembers'}, // 删除成员
    pagingMembers: {controller: 'MemberController' , method: 'pagingMembers'}, // 分页查询所有成员
};
 //menu-controller
let MenuController = {
    __name: 'MenuController',
    create: {controller: 'MenuController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'MenuController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findById: {controller: 'MenuController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'MenuController' , method: 'pagingByCriteria'}, // 分页查询
    update: {controller: 'MenuController' , method: 'update'}, // 更新
};
 //microapp-archive-controller
let MicroappArchiveController = {
    __name: 'MicroappArchiveController',
    create: {controller: 'MicroappArchiveController' , method: 'create'}, // 新增
    deleteById: {controller: 'MicroappArchiveController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'MicroappArchiveController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'MicroappArchiveController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'MicroappArchiveController' , method: 'findById'}, // 按主键查询
    handleWhitelist: {controller: 'MicroappArchiveController' , method: 'handleWhitelist'}, // 授权
    loadWhitelist: {controller: 'MicroappArchiveController' , method: 'loadWhitelist'}, // 获取授权
    pageByCriteria: {controller: 'MicroappArchiveController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'MicroappArchiveController' , method: 'update'}, // 更新
    uploadMicroappArchive: {controller: 'MicroappArchiveController' , method: 'uploadMicroappArchive'}, // 微应用介质上传
    uploadPreviews: {controller: 'MicroappArchiveController' , method: 'uploadPreviews'}, // 上传预览图
};
 //microapp-controller
let MicroappController = {
    __name: 'MicroappController',
    create: {controller: 'MicroappController' , method: 'create'}, // 新增
    deleteById: {controller: 'MicroappController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'MicroappController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'MicroappController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'MicroappController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'MicroappController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'MicroappController' , method: 'update'}, // 更新
    uploadIcon: {controller: 'MicroappController' , method: 'uploadIcon'}, // 上传图标
};
 //microapp-group-controller
let MicroappGroupController = {
    __name: 'MicroappGroupController',
    addMicroappGroupMicroapps: {controller: 'MicroappGroupController' , method: 'addMicroappGroupMicroapps'}, // 添加微应用到分组
    create: {controller: 'MicroappGroupController' , method: 'create'}, // 新增
    deleteById: {controller: 'MicroappGroupController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'MicroappGroupController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'MicroappGroupController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'MicroappGroupController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'MicroappGroupController' , method: 'pageByCriteria'}, // 按条件分页查询
    removeMicroappGroupMicroapps: {controller: 'MicroappGroupController' , method: 'removeMicroappGroupMicroapps'}, // 移除分组中的微应用
    update: {controller: 'MicroappGroupController' , method: 'update'}, // 更新
};
 //msg-tpl-controller
let MsgTplController = {
    __name: 'MsgTplController',
    create: {controller: 'MsgTplController' , method: 'create'}, // 新增
    deleteById: {controller: 'MsgTplController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'MsgTplController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'MsgTplController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'MsgTplController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'MsgTplController' , method: 'pageByCriteria'}, // 按条件分页查询
    refreshMsgTpl: {controller: 'MsgTplController' , method: 'refreshMsgTpl'}, // 刷新模版缓存
    update: {controller: 'MsgTplController' , method: 'update'}, // 更新
};
 //operation-log-controller
let OperationLogController = {
    __name: 'OperationLogController',
    getOperationLogDetail: {controller: 'OperationLogController' , method: 'getOperationLogDetail'}, // 获取操作日志详细
    pagingOperationLogs: {controller: 'OperationLogController' , method: 'pagingOperationLogs'}, // 分页查询操作日志
};
 //organization-controller
let OrganizationController = {
    __name: 'OrganizationController',
    addOrgEmployees: {controller: 'OrganizationController' , method: 'addOrgEmployees'}, // 往机构下批量添加员工
    create: {controller: 'OrganizationController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'OrganizationController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findById: {controller: 'OrganizationController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'OrganizationController' , method: 'pagingByCriteria'}, // 分页查询
    querySubEmployees: {controller: 'OrganizationController' , method: 'querySubEmployees'}, // 查询机构下的员工
    querySubPositions: {controller: 'OrganizationController' , method: 'querySubPositions'}, // 查询机构下的岗位
    querySubWorkgroups: {controller: 'OrganizationController' , method: 'querySubWorkgroups'}, // 查询机构下的工作组
    removeOrgEmployees: {controller: 'OrganizationController' , method: 'removeOrgEmployees'}, // 从机构下批量移除员工
    update: {controller: 'OrganizationController' , method: 'update'}, // 更新
};
 //original-message-controller
let OriginalMessageController = {
    __name: 'OriginalMessageController',
    create: {controller: 'OriginalMessageController' , method: 'create'}, // 新增
    deleteById: {controller: 'OriginalMessageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'OriginalMessageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'OriginalMessageController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'OriginalMessageController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'OriginalMessageController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'OriginalMessageController' , method: 'update'}, // 更新
};
 //overview-controller
let OverviewController = {
    __name: 'OverviewController',
    getOverview: {controller: 'OverviewController' , method: 'getOverview'}, // 获取平台概要
};
 //portal-controller
let PortalController = {
    __name: 'PortalController',
    currentApp: {controller: 'PortalController' , method: 'currentApp'}, // 缓存当前appId
    showMenu: {controller: 'PortalController' , method: 'showMenu'}, // 是否显示某些特殊菜单
};
 //portal-member-controller
let PortalMemberController = {
    __name: 'PortalMemberController',
    pagingMembers: {controller: 'PortalMemberController' , method: 'pagingMembers'}, // 分页查询所有成员
};
 //portal-operation-log-controller
let PortalOperationLogController = {
    __name: 'PortalOperationLogController',
    getOperationLogDetail: {controller: 'PortalOperationLogController' , method: 'getOperationLogDetail'}, // 根据日志id获取日志详情
    pagingByCriteria: {controller: 'PortalOperationLogController' , method: 'pagingByCriteria'}, // 按条件分页查询操作日志列表
};
 //portal-role-controller
let PortalRoleController = {
    __name: 'PortalRoleController',
    pagingByCriteria: {controller: 'PortalRoleController' , method: 'pagingByCriteria'}, // 分页查询所有角色
};
 //portal-user-controller
let PortalUserController = {
    __name: 'PortalUserController',
    pagingByCriteria: {controller: 'PortalUserController' , method: 'pagingByCriteria'}, // 分页查询所有用户
};
 //position-controller
let PositionController = {
    __name: 'PositionController',
    addPositionEmployees: {controller: 'PositionController' , method: 'addPositionEmployees'}, // 往岗位下添加员工
    create: {controller: 'PositionController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'PositionController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findById: {controller: 'PositionController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'PositionController' , method: 'pagingByCriteria'}, // 分页查询
    querySubEmployees: {controller: 'PositionController' , method: 'querySubEmployees'}, // 列出此岗位的员工
    removePositionEmployees: {controller: 'PositionController' , method: 'removePositionEmployees'}, // 从岗位下移除员工
    update: {controller: 'PositionController' , method: 'update'}, // 更新
};
 //push-channel-controller
let PushChannelController = {
    __name: 'PushChannelController',
    create: {controller: 'PushChannelController' , method: 'create'}, // 新增
    createApnsChannel: {controller: 'PushChannelController' , method: 'createApnsChannel'}, // 创建ios apns推送通道
    createHuaweiChannel: {controller: 'PushChannelController' , method: 'createHuaweiChannel'}, // 创建android huawei推送通道
    createMeizuChannel: {controller: 'PushChannelController' , method: 'createMeizuChannel'}, // 创建android meizu推送通道
    createOppoChannel: {controller: 'PushChannelController' , method: 'createOppoChannel'}, // 创建android oppo推送通道
    createVivoChannel: {controller: 'PushChannelController' , method: 'createVivoChannel'}, // 创建android vivo推送通道
    createXiaomiChannel: {controller: 'PushChannelController' , method: 'createXiaomiChannel'}, // 创建android xiaom推送通道
    deleteById: {controller: 'PushChannelController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'PushChannelController' , method: 'deleteByIds'}, // 按主键集合删除
    findApnsChannelByCriteria: {controller: 'PushChannelController' , method: 'findApnsChannelByCriteria'}, // 按条件获取apns通道
    findById: {controller: 'PushChannelController' , method: 'findById'}, // 按主键查询
    findHuaweiChannelByCriteria: {controller: 'PushChannelController' , method: 'findHuaweiChannelByCriteria'}, // 按条件获取huawei通道
    findMeizuChannelByCriteria: {controller: 'PushChannelController' , method: 'findMeizuChannelByCriteria'}, // 按条件获取meizu通道
    findOppoChannelByCriteria: {controller: 'PushChannelController' , method: 'findOppoChannelByCriteria'}, // 按条件获取oppo通道
    findVivoChannelByCriteria: {controller: 'PushChannelController' , method: 'findVivoChannelByCriteria'}, // 按条件获取vivo通道
    findXiaomiChannelByCriteria: {controller: 'PushChannelController' , method: 'findXiaomiChannelByCriteria'}, // 按条件获取xiaomi通道
    refreshPushChannel: {controller: 'PushChannelController' , method: 'refreshPushChannel'}, // 刷新通道配置
    update: {controller: 'PushChannelController' , method: 'update'}, // 更新
    updateApnsChannel: {controller: 'PushChannelController' , method: 'updateApnsChannel'}, // 更新ios apns推送通道
    updateHuaweiChannel: {controller: 'PushChannelController' , method: 'updateHuaweiChannel'}, // 更新android huawei推送通道
    updateMeizuChannel: {controller: 'PushChannelController' , method: 'updateMeizuChannel'}, // 更新android meizu推送通道
    updateOppoChannel: {controller: 'PushChannelController' , method: 'updateOppoChannel'}, // 更新android oppo推送通道
    updateVivoChannel: {controller: 'PushChannelController' , method: 'updateVivoChannel'}, // 更新android vivo推送通道
    updateXiaomiChannel: {controller: 'PushChannelController' , method: 'updateXiaomiChannel'}, // 更新android xiaom推送通道
    uploadApnsCert: {controller: 'PushChannelController' , method: 'uploadApnsCert'}, // 上传apns证书
};
 //push-collect-controller
let PushCollectController = {
    __name: 'PushCollectController',
    pushSimple: {controller: 'PushCollectController' , method: 'pushSimple'}, // 简单推送
    pushTemplate: {controller: 'PushCollectController' , method: 'pushTemplate'}, // 模版推送
    uploadTargetsArtifact: {controller: 'PushCollectController' , method: 'uploadTargetsArtifact'}, // 解析推送目标文件并去重, txt文件或json文件类型, UTF-8编码, txt为每行一个, json为数组
};
 //push-collect-stat-controller
let PushCollectStatController = {
    __name: 'PushCollectStatController',
    findByCriteria: {controller: 'PushCollectStatController' , method: 'findByCriteria'}, // 按条件查询, 用于折线图,柱状图
    pageByCriteria: {controller: 'PushCollectStatController' , method: 'pageByCriteria'}, // 按条件分页查询, 用于折线图,柱状图
};
 //push-message-controller
let PushMessageController = {
    __name: 'PushMessageController',
    create: {controller: 'PushMessageController' , method: 'create'}, // 新增
    deleteById: {controller: 'PushMessageController' , method: 'deleteById'}, // 按主键删除
    deleteByIds: {controller: 'PushMessageController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'PushMessageController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'PushMessageController' , method: 'findById'}, // 按主键查询
    pageByCriteria: {controller: 'PushMessageController' , method: 'pageByCriteria'}, // 按条件分页查询
    update: {controller: 'PushMessageController' , method: 'update'}, // 更新
};
 //push-send-stat-controller
let PushSendStatController = {
    __name: 'PushSendStatController',
    findByCriteria: {controller: 'PushSendStatController' , method: 'findByCriteria'}, // 按条件查询, 用于折线图,柱状图
    getTodaySendCount: {controller: 'PushSendStatController' , method: 'getTodaySendCount'}, // 获取当日推送总数
    pageByCriteria: {controller: 'PushSendStatController' , method: 'pageByCriteria'}, // 按条件分页查询, 用于折线图,柱状图
};
 //res-group-controller
let ResGroupController = {
    __name: 'ResGroupController',
    create: {controller: 'ResGroupController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'ResGroupController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findByCriteria: {controller: 'ResGroupController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'ResGroupController' , method: 'findById'}, // 按主键查询
    findSubFunctionByCriteria: {controller: 'ResGroupController' , method: 'findSubFunctionByCriteria'}, // 查询某资源组下的功能
    findSubMenuByCriteria: {controller: 'ResGroupController' , method: 'findSubMenuByCriteria'}, // 查询某资源组下的菜单
    pagingByCriteria: {controller: 'ResGroupController' , method: 'pagingByCriteria'}, // 分页查询
    update: {controller: 'ResGroupController' , method: 'update'}, // 更新
};
 //role-controller
let RoleController = {
    __name: 'RoleController',
    bindRoleToUsers: {controller: 'RoleController' , method: 'bindRoleToUsers'}, // 将角色绑定至用户(用户id以&#x27;,&#x27;分割)
    create: {controller: 'RoleController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'RoleController' , method: 'deleteByIds'}, // 按主键集合删除
    findById: {controller: 'RoleController' , method: 'findById'}, // 按主键查询
    getUsersByRoleId: {controller: 'RoleController' , method: 'getUsersByRoleId'}, // 分页查询拥有某角色的用户
    handleRoleTplResource: {controller: 'RoleController' , method: 'handleRoleTplResource'}, // 修改角色资源
    loadWholeResources: {controller: 'RoleController' , method: 'loadWholeResources'}, // 查询角色对应的全部资源
    pagingByCriteria: {controller: 'RoleController' , method: 'pagingByCriteria'}, // 分页查询所有角色
    unbindRoleToUsers: {controller: 'RoleController' , method: 'unbindRoleToUsers'}, // 将角色绑定的用户解绑(用户id以&#x27;,&#x27;分割)
    update: {controller: 'RoleController' , method: 'update'}, // 更新
};
 //role-tpl-controller
let RoleTplController = {
    __name: 'RoleTplController',
    create: {controller: 'RoleTplController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'RoleTplController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'RoleTplController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'RoleTplController' , method: 'findById'}, // 按主键查询
    handleRoleTplResource: {controller: 'RoleTplController' , method: 'handleRoleTplResource'}, // 修改角色模板资源
    loadWholeResources: {controller: 'RoleTplController' , method: 'loadWholeResources'}, // 查询角色模板对应的资源树
    pageRoleByTemplateId: {controller: 'RoleTplController' , method: 'pageRoleByTemplateId'}, // 查询使用此模板创建的角色
    update: {controller: 'RoleTplController' , method: 'update'}, // 更新
};
 //role-tpl-group-controller
let RoleTplGroupController = {
    __name: 'RoleTplGroupController',
    create: {controller: 'RoleTplGroupController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'RoleTplGroupController' , method: 'deleteByIds'}, // 按主键集合删除
    findByCriteria: {controller: 'RoleTplGroupController' , method: 'findByCriteria'}, // 按条件查询
    findById: {controller: 'RoleTplGroupController' , method: 'findById'}, // 按主键查询
    newRoleInstances: {controller: 'RoleTplGroupController' , method: 'newRoleInstances'}, // 按条件查询
    update: {controller: 'RoleTplGroupController' , method: 'update'}, // 更新
};
 //statistic-crash-stat-controller
let StatisticCrashStatController = {
    __name: 'StatisticCrashStatController',
    findByCriteria: {controller: 'StatisticCrashStatController' , method: 'findByCriteria'}, // 查询统计信息，用于统计折线图
    getAppTodayCrashCount: {controller: 'StatisticCrashStatController' , method: 'getAppTodayCrashCount'}, // 查询某个App今天的crash次数
    getAppTotalCrashCount: {controller: 'StatisticCrashStatController' , method: 'getAppTotalCrashCount'}, // 查询某个App总的crash次数
    getCrashDetails: {controller: 'StatisticCrashStatController' , method: 'getCrashDetails'}, // 查询详细的crash异常，传timeType是为了更好的锁定ES检索范围
    pagingByMinuteCriteria: {controller: 'StatisticCrashStatController' , method: 'pagingByMinuteCriteria'}, // 分页查询统计信息，用于定位具体信息
};
 //statistic-device-distribution-controller
let StatisticDeviceDistributionController = {
    __name: 'StatisticDeviceDistributionController',
    findByCriteria: {controller: 'StatisticDeviceDistributionController' , method: 'findByCriteria'}, // 查询设备分布统计信息
};
 //statistic-org-compare-controller
let StatisticOrgCompareController = {
    __name: 'StatisticOrgCompareController',
    findByCriteria: {controller: 'StatisticOrgCompareController' , method: 'findByCriteria'}, // 查询部门对比统计信息
};
 //statistic-platform-controller
let StatisticPlatformController = {
    __name: 'StatisticPlatformController',
    queryPlatformTypeList: {controller: 'StatisticPlatformController' , method: 'queryPlatformTypeList'}, // 查询收集的系统类型列表
    queryPlatformVersionList: {controller: 'StatisticPlatformController' , method: 'queryPlatformVersionList'}, // 查询收集的系统版本列表
};
 //statistic-user-behavior-controller
let StatisticUserBehaviorController = {
    __name: 'StatisticUserBehaviorController',
    findByCriteria: {controller: 'StatisticUserBehaviorController' , method: 'findByCriteria'}, // 查询用户趋势统计信息
};
 //tools-controller
let ToolsController = {
    __name: 'ToolsController',
    scanFunctions: {controller: 'ToolsController' , method: 'scanFunctions'}, // 通过代码扫描, 获取应用的功能定义
};
 //user-controller
let UserController = {
    __name: 'UserController',
    create: {controller: 'UserController' , method: 'create'}, // 新增用户, 可同时绑定员工。一个员工最多只能绑定一个用户
    deleteByIds: {controller: 'UserController' , method: 'deleteByIds'}, // 删除用户, 只删用户, 不删对应的人员
    disableUser: {controller: 'UserController' , method: 'disableUser'}, // 禁用用户
    enableUser: {controller: 'UserController' , method: 'enableUser'}, // 启用用户
    findById: {controller: 'UserController' , method: 'findById'}, // 按主键查询
    getAuthToken: {controller: 'UserController' , method: 'getAuthToken'}, // 获取认证token
    getSsoUser: {controller: 'UserController' , method: 'getSsoUser'}, // 获取当前登录用户
    listRoles: {controller: 'UserController' , method: 'listRoles'}, // 获取某个用户的角色
    listUserFunctionCodes: {controller: 'UserController' , method: 'listUserFunctionCodes'}, // 获取用户的所有可用的功能编码
    listUserFunctions: {controller: 'UserController' , method: 'listUserFunctions'}, // 获取用户的所有可用的功能
    listUserMenus: {controller: 'UserController' , method: 'listUserMenus'}, // 获取用户的所有菜单
    modifyPassword: {controller: 'UserController' , method: 'modifyPassword'}, // 修改用户密码
    pagingByCriteria: {controller: 'UserController' , method: 'pagingByCriteria'}, // 分页查询所有用户
    resetPassword: {controller: 'UserController' , method: 'resetPassword'}, // 重置用户密码
};
 //workgroup-controller
let WorkgroupController = {
    __name: 'WorkgroupController',
    addWorkgroupEmployees: {controller: 'WorkgroupController' , method: 'addWorkgroupEmployees'}, // 往工作组下添加员工
    create: {controller: 'WorkgroupController' , method: 'create'}, // 新增
    deleteByIds: {controller: 'WorkgroupController' , method: 'deleteByIds'}, // 按主键集合(以&#x27;,&#x27;分割)删除
    findById: {controller: 'WorkgroupController' , method: 'findById'}, // 按主键查询
    pagingByCriteria: {controller: 'WorkgroupController' , method: 'pagingByCriteria'}, // 分页查询
    querySubEmployees: {controller: 'WorkgroupController' , method: 'querySubEmployees'}, // 查询工作组下的员���
    removeWorkgroupEmployees: {controller: 'WorkgroupController' , method: 'removeWorkgroupEmployees'}, // 从工作组下移除员工
    update: {controller: 'WorkgroupController' , method: 'update'}, // 更新
};

export {
    ApiCredentialController,
    AppArchiveController,
    AppController,
    AppstoreApiController,
    ArchiveDownloadStatController,
    AuthTplController,
    BusinessAddressController,
    BusinessAddressRuleController,
    BusinessAnnounceResourceController,
    BusinessAppPageController,
    BusinessAuthResController,
    BusinessBannerResourceController,
    BusinessCommonController,
    BusinessCustomFloorConfController,
    BusinessDictController,
    BusinessDictItemController,
    BusinessExcelController,
    BusinessFestivalLatticeResourceController,
    BusinessFloorController,
    BusinessInformResourceController,
    BusinessLatticeResourceController,
    BusinessPopupPageController,
    BusinessSchemeConfController,
    BusinessSchemeController,
    BusinessSpreadPageController,
    BusinessTabPageController,
    BusinessWelcomePageController,
    CofToolsController,
    CommentController,
    DictEntryController,
    DictTypeController,
    DimensionController,
    EmployeeController,
    FunctionController,
    GatewayApiAccessController,
    GatewayConfigurationController,
    GatewayOpenApiController,
    GatewayRouteController,
    GatewayRouteValveRateController,
    IamAuthResController,
    IamDeviceController,
    IamDimensionController,
    IamEmpController,
    IamLoginConfigController,
    IamOrgController,
    IamPositionController,
    IamUserController,
    LicenseController,
    MemberController,
    MenuController,
    MicroappArchiveController,
    MicroappController,
    MicroappGroupController,
    MsgTplController,
    OperationLogController,
    OrganizationController,
    OriginalMessageController,
    OverviewController,
    PortalController,
    PortalMemberController,
    PortalOperationLogController,
    PortalRoleController,
    PortalUserController,
    PositionController,
    PushChannelController,
    PushCollectController,
    PushCollectStatController,
    PushMessageController,
    PushSendStatController,
    ResGroupController,
    RoleController,
    RoleTplController,
    RoleTplGroupController,
    StatisticCrashStatController,
    StatisticDeviceDistributionController,
    StatisticOrgCompareController,
    StatisticPlatformController,
    StatisticUserBehaviorController,
    ToolsController,
    UserController,
    WorkgroupController,
};
